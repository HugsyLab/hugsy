{
  "permissions": {
    "allow": [
      "Read(**)",
      "Read(**/public/**)",
      "Read(**/docs/**)",
      "Write(**/test/**)",
      "Write(**/tmp/**)",
      "Write(**/*.test.{ts,js})",
      "Write(**/sandbox/**)",
      "Bash(git *)",
      "Bash(npm test)",
      "Bash(npm run *)",
      "Bash(pnpm *)",
      "Bash(yarn *)",
      "Bash(node *)",
      "Bash(npx *)",
      "Bash(echo *)",
      "Bash(cat **/package.json)",
      "LS(**)",
      "Grep(**)",
      "Glob(**)"
    ],
    "ask": [
      "Write(**/*.config.*)",
      "Write(**/package.json)",
      "Write(**/tsconfig.json)",
      "Write(**/.github/**)",
      "Write(**/CI/**)",
      "Bash(npm publish)",
      "Bash(npm install *)",
      "Bash(docker *)",
      "Edit(**/migration/**)"
    ],
    "deny": [
      "Write(**/node_modules/**)",
      "Write(**/.git/**)",
      "Write(**/dist/**)",
      "Write(**/build/**)",
      "Write(**/prod/**)",
      "Write(**/production/**)",
      "Write(**/.env*)",
      "Write(**/secrets/**)",
      "Write(**/credentials/**)",
      "Read(**/*password*)",
      "Read(**/*secret*)",
      "Read(**/*key*)",
      "Read(**/.env*)",
      "Bash(rm -rf *)",
      "Bash(sudo *)",
      "Bash(chmod 777 *)",
      "Bash(curl * | bash)",
      "Bash(wget * | bash)",
      "Bash(eval *)"
    ]
  },
  "hooks": {
    "PreToolUse": [
      {
        "matcher": "Write(**/*.ts)",
        "command": "echo 'üìù TypeScript file will be modified'"
      },
      {
        "matcher": "Write(**/*.js)",
        "command": "echo 'üìù JavaScript file will be modified'"
      },
      {
        "matcher": "Bash(git *)",
        "command": "echo 'üîÄ Git operation starting...'"
      },
      {
        "matcher": "Read(**/config/**)",
        "command": "echo '‚öôÔ∏è Reading configuration files'"
      }
    ],
    "PostToolUse": [
      {
        "matcher": "Write(**)",
        "command": "echo '‚úÖ File write completed'"
      },
      {
        "matcher": "Bash(npm test)",
        "command": "echo '‚úÖ Test run completed'"
      },
      {
        "matcher": "Bash(npm run build)",
        "command": "echo '‚úÖ Build completed'"
      }
    ],
    "Notification": [
      {
        "matcher": "*error*",
        "command": "echo '‚ùå Error notification triggered'"
      },
      {
        "matcher": "*warning*",
        "command": "echo '‚ö†Ô∏è Warning notification'"
      }
    ],
    "UserPromptSubmit": [
      {
        "matcher": "*fix*",
        "command": "echo 'üîß Fix request received'"
      },
      {
        "matcher": "*debug*",
        "command": "echo 'üêõ Debug mode requested'"
      },
      {
        "matcher": "*test*",
        "command": "echo 'üß™ Test request detected'"
      }
    ],
    "Stop": [
      {
        "command": "echo 'üõë Operation stopped by user'"
      }
    ],
    "SubagentStop": [
      {
        "command": "echo 'ü§ñ Subagent stopped'"
      }
    ],
    "SessionEnd": [
      {
        "command": "echo 'üëã Session ending - saving work...'"
      }
    ],
    "PreCompact": [
      {
        "command": "echo '‚ôªÔ∏è Compacting conversation history'"
      }
    ],
    "SessionStart": [
      {
        "command": "echo 'üöÄ Welcome to Hugsy-powered development environment!'"
      },
      {
        "command": "echo 'üìä Loading project configuration...'"
      }
    ]
  },
  "env": {
    "NODE_ENV": "development",
    "DEBUG": "true",
    "LOG_LEVEL": "info",
    "CI": "false",
    "HUGSY_MODE": "showcase",
    "ENABLE_METRICS": "true",
    "ENABLE_TELEMETRY": "false",
    "MAX_RETRIES": "3",
    "TIMEOUT": "30000",
    "WORKSPACE": "/workspace",
    "COLOR_OUTPUT": "true",
    "VERBOSE": "false",
    "PROJECT": "awesome-app",
    "VERSION": "2.0.0"
  },
  "includeCoAuthoredBy": true,
  "cleanupPeriodDays": 30
}